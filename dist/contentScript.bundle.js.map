{"version":3,"file":"contentScript.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAQwC;AACkB;AAKlB;AACxC;AACA,kCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA;AACA,4BAA4B,0EAAY;AACxC,4BAA4B,sEAAW;AACvC,qBAAqB,iFAAmB;AACxC;AACA;AACA,KAAK;AACL;AACA,IAAI,2EAAa,GAAG,mCAAmC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0EAAY;AAC1C;AACA,+BAA+B,2EAAa;AAC5C,8BAA8B,sEAAW;AACzC;AACA,eAAe,iFAAmB;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0EAAY;AACtC;AACA,2BAA2B,2EAAa;AACxC,0BAA0B,sEAAW;AACrC;AACA,eAAe,iFAAmB;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA,QAAQ,2EAAa,GAAG,mCAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0EAAY;AAC9C,kCAAkC,sEAAW;AAC7C,2BAA2B,iFAAmB;AAC9C;AACA;AACA,aAAa;AACb,YAAY,2EAAa,GAAG,kCAAkC;AAC9D;AACA;AACA;AACA,+BAA+B,iFAAmB;AAClD;AACA;AACA,iBAAiB;AACjB,gBAAgB,2EAAa,GAAG,kCAAkC;AAClE;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4CAA4C,gFAAkB;AAC9D;AACA;AACA;AACA,4CAA4C,0EAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gFAAkB;AAClC;AACA;AACA;AACA,iCAAiC,yEAAW,GAAG,6BAA6B;AAC5E;AACA,iBAAiB,8EAAgB;AACjC,iBAAiB,4EAAc;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO,oBAAoB,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;ACrMO,+CAA+C,OAAO;;;;;;;;;;;;;;;;;;;;;;ACOhC;AACmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;AACO,+BAA+B,sBAAsB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,0BAA0B;AAC1D,IAAI,2EAAuB;AAC3B,IAAI,2EAAuB;AAC3B;AACA;AACO;AACP;AACA;AACA,sCAAsC,6EAAyB;AAC/D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO,uBAAuB,gCAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAQ,GAAG,kCAAkC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAA0B;AAChD;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAY;AACxB;AACA;AACA;AACA;AACA,YAAY,kEAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCrLA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2EAAW;AAC/B;AACA;AACA,CAAC","sources":["webpack://bannerclick-ext/./src/content-scripts/bannerDetector/findBanners.js","webpack://bannerclick-ext/./src/content-scripts/utilities/elementMethods.js","webpack://bannerclick-ext/./src/content-scripts/utilities/textMethods.js","webpack://bannerclick-ext/./src/content-scripts/utilities/utilityMethods.js","webpack://bannerclick-ext/webpack/bootstrap","webpack://bannerclick-ext/webpack/runtime/define property getters","webpack://bannerclick-ext/webpack/runtime/hasOwnProperty shorthand","webpack://bannerclick-ext/webpack/runtime/make namespace object","webpack://bannerclick-ext/./src/content-scripts/content-script.js"],"sourcesContent":["import {\r\n    concatWithOr,\r\n    concatWithAnd,\r\n    findElementsByXpath,\r\n    pruneElements,\r\n    findByZIndex,\r\n    findOptimal,\r\n    findDeepestElement,\r\n} from \"../utilities/utilityMethods.js\";\r\nimport { toXPathText } from \"../utilities/textMethods.js\";\r\nimport {\r\n    findFixedAncestors,\r\n    isInsideViewport,\r\n    hasEnoughWords,\r\n} from \"../utilities/elementMethods.js\";\r\n\r\nfunction findElementsWithCookie({ DOM, lang, jsonizedFile }) {\r\n    let words = [\r\n        jsonizedFile[\"words\"][lang][\"cookies\"],\r\n        jsonizedFile[\"words\"][lang][\"cookies1\"],\r\n    ];\r\n    const oredWordsString = concatWithOr(words);\r\n    const xpathExpression = toXPathText(oredWordsString);\r\n    const elements = findElementsByXpath({\r\n        DOM: DOM,\r\n        xpathExpression: xpathExpression,\r\n    });\r\n\r\n    pruneElements({ elements: elements, strict: false });\r\n    console.log(\"find Elements With Cookie inside\");\r\n    console.log(elements);\r\n\r\n    if (!elements.length) {\r\n        let words = [\r\n            jsonizedFile[\"words\"][lang][\"partner\"],\r\n            jsonizedFile[\"words\"][lang][\"consent\"],\r\n            jsonizedFile[\"words\"][lang][\"accept\"],\r\n            jsonizedFile[\"words\"][lang][\"agree\"],\r\n            jsonizedFile[\"words\"][lang][\"personalised\"],\r\n            jsonizedFile[\"words\"][lang][\"policy\"],\r\n            jsonizedFile[\"words\"][lang][\"privacy\"],\r\n        ];\r\n        let oredWordsString = concatWithOr(words);\r\n        words = [oredWordsString, jsonizedFile[\"words\"][lang][\"cookie\"]];\r\n        let andedWordsString = concatWithAnd(words);\r\n        let xpathExpression = toXPathText(andedWordsString);\r\n        elements.push(\r\n            ...findElementsByXpath({\r\n                DOM: DOM,\r\n                xpathExpression: xpathExpression,\r\n            })\r\n        );\r\n\r\n        words = [\r\n            jsonizedFile[\"words\"][lang][\"partner\"],\r\n            jsonizedFile[\"words\"][lang][\"consent\"],\r\n            jsonizedFile[\"words\"][lang][\"accept\"],\r\n            jsonizedFile[\"words\"][lang][\"agree\"],\r\n            jsonizedFile[\"words\"][lang][\"personalised\"],\r\n            jsonizedFile[\"words\"][lang][\"policy\"],\r\n            jsonizedFile[\"words\"][lang][\"privacy\"],\r\n        ];\r\n        oredWordsString = concatWithOr(words);\r\n        words = [oredWordsString, jsonizedFile[\"words\"][lang][\"Cookie\"]];\r\n        andedWordsString = concatWithAnd(words);\r\n        xpathExpression = toXPathText(andedWordsString);\r\n        elements.push(\r\n            ...findElementsByXpath({\r\n                DOM: DOM,\r\n                xpathExpression: xpathExpression,\r\n            })\r\n        );\r\n\r\n        pruneElements({ elements: elements, strict: false });\r\n\r\n        if (!elements.length) {\r\n            let words = [\r\n                jsonizedFile[\"words\"][lang][\"cookie\"],\r\n                jsonizedFile[\"words\"][lang][\"privacy policy\"],\r\n                jsonizedFile[\"words\"][lang][\"legitimate interest\"],\r\n            ];\r\n            let oredWordsString = concatWithOr(words);\r\n            let xpathExpression = toXPathText(oredWordsString);\r\n            let elements = findElementsByXpath({\r\n                DOM: DOM,\r\n                xpathExpression: xpathExpression,\r\n            });\r\n            pruneElements({ elements: elements, strict: true });\r\n\r\n            if (!elements.length) {\r\n                let xpathExpression = \".//*[contains(@id, 'cookie')]\";\r\n                let elements = findElementsByXpath({\r\n                    DOM: DOM,\r\n                    xpathExpression: xpathExpression,\r\n                });\r\n                pruneElements({ elements: elements, strict: true });\r\n            }\r\n        }\r\n    }\r\n    return elements;\r\n}\r\n\r\nexport function findBanners(DOM, lang = \"en\", jsonizedFile) {\r\n    let banners = [];\r\n    const elementsWithCookieInside = findElementsWithCookie({\r\n        DOM: DOM,\r\n        lang: lang,\r\n        jsonizedFile: jsonizedFile,\r\n    });\r\n    if (elementsWithCookieInside.length) {\r\n        let fixedElementsWithCookieInside = findFixedAncestors(\r\n            elementsWithCookieInside\r\n        );\r\n        if (!fixedElementsWithCookieInside.size) {\r\n            fixedElementsWithCookieInside = findByZIndex(\r\n                elementsWithCookieInside\r\n            );\r\n        }\r\n        if (!fixedElementsWithCookieInside.size) {\r\n            fixedElementsWithCookieInside.set(\r\n                document.querySelector(\"body\"),\r\n                findDeepestElement(elementsWithCookieInside)\r\n            );\r\n        }\r\n        fixedElementsWithCookieInside.forEach((value, key) => {\r\n            let optimalElement = findOptimal({ parent: key, element: value });\r\n            if (\r\n                !isInsideViewport(optimalElement) ||\r\n                !hasEnoughWords(optimalElement)\r\n            )\r\n                return;\r\n            banners.push(optimalElement);\r\n        });\r\n    }\r\n    return banners;\r\n}\r\n","function entriesToRemove(elements, unrelatedElements) {\r\n    unrelatedElements.forEach((element) => {\r\n        const index = elements.indexOf(element);\r\n        if (index !== -1) elements.splice(index, 1);\r\n    });\r\n}\r\n\r\nfunction isInsideOptions(element) {\r\n    while (![\"div\", \"html\"].includes(element.tagName.toLowerCase())) {\r\n        if (\r\n            [\"table\", \"tr\", \"ul\", \"ol\", \"script\"].includes(\r\n                element.tagName.toLowerCase()\r\n            )\r\n        )\r\n            return true;\r\n        element = element.parentElement;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isFixedElement(element) {\r\n    const style = window.getComputedStyle(element);\r\n    return style.position === \"fixed\";\r\n}\r\n\r\nfunction findFixedAncestor(element) {\r\n    while (true) {\r\n        if (element.tagName.toLowerCase() === \"html\") return null;\r\n        else if (isFixedElement(element)) return element;\r\n        element = element.parentElement;\r\n    }\r\n}\r\nexport function isInsideViewport(element) {\r\n    // check if the element is inside the viewport\r\n    const rects = element.getClientRects();\r\n    const viewportHeight =\r\n        window.innerHeight || document.documentElement.clientHeight;\r\n    const viewportWidth =\r\n        window.innerWidth || document.documentElement.clientWidth;\r\n    const scrollTop = window.scrollY || document.documentElement.scrollTop;\r\n    const scrollLeft = window.scrollX || document.documentElement.scrollLeft;\r\n\r\n    for (const rect of rects) {\r\n        const top = rect.top + scrollTop;\r\n        const left = rect.left + scrollLeft;\r\n        const bottom = rect.bottom + scrollTop;\r\n        const right = rect.right + scrollLeft;\r\n\r\n        if (\r\n            bottom >= 0 &&\r\n            top <= viewportHeight &&\r\n            right >= 0 &&\r\n            left <= viewportWidth\r\n        ) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction isInsideViewport2(element) {\r\n    const rect = element.getBoundingClientRect();\r\n    return (\r\n        rect.top >= 0 &&\r\n        rect.left >= 0 &&\r\n        rect.bottom <=\r\n            (window.innerHeight || document.documentElement.clientHeight) &&\r\n        rect.right <=\r\n            (window.innerWidth || document.documentElement.clientWidth)\r\n    );\r\n}\r\n\r\nfunction isPositiveZIndexInt(element) {\r\n    const style = window.getComputedStyle(element);\r\n    const zIndex = style.zIndex;\r\n    return zIndex !== \"\" && parseInt(zIndex) > 5;\r\n}\r\n\r\nexport function findAncestorWithIntZIndex(element) {\r\n    while (true) {\r\n        if (element.tagName.toLowerCase() === \"html\") return null;\r\n        else if (isPositiveZIndexInt(element)) return element;\r\n        element = element.parentElement;\r\n    }\r\n}\r\nconst isInsideFooter = (element) => element.closest(\"footer\") !== null;\r\n\r\nconst isLink = (element) =>\r\n    element.closest(\"a\") !== null || // Check if the element itself is a link\r\n    element.closest(\"[onclick]\") !== null; // Check if the element has an onclick attribute\r\n\r\nfunction hasNegativeZIndex(element) {\r\n    const style = window.getComputedStyle(element);\r\n    const zIndex = style.zIndex;\r\n    return zIndex !== \"\" && parseInt(zIndex) < 0;\r\n}\r\n\r\nexport function deleteUnrelatedElements(elements, strict) {\r\n    const unrelatedElements = [];\r\n    elements.forEach((element, index) => {\r\n        try {\r\n            if (isInsideOptions(element) || !isInsideViewport(element))\r\n                unrelatedElements.push(element);\r\n            else if (strict && !findFixedAncestor(element))\r\n                unrelatedElements.push(element);\r\n            else if (\r\n                findFixedAncestor(element) ||\r\n                findAncestorWithIntZIndex(element)\r\n            )\r\n                return; // check this functionality with Debugger\r\n            else if (isInsideFooter(element)) unrelatedElements.push(element);\r\n            else if (isLink(element)) unrelatedElements.push(element);\r\n        } catch (error) {\r\n            unrelatedElements.push(element);\r\n        }\r\n    });\r\n    entriesToRemove(elements, unrelatedElements);\r\n}\r\n\r\nexport function deleteInvisibleElements(elements) {\r\n    const invisibleElements = [];\r\n    elements.forEach((element, index) => {\r\n        try {\r\n            if (element.tagName.toLowerCase() === \"html\") return;\r\n            if (\r\n                element.closest('[style*=\"visibility: hidden\"]') ||\r\n                element.closest('[style*=\"display: none\"]') ||\r\n                hasNegativeZIndex(element)\r\n            )\r\n                invisibleElements.push(element);\r\n        } catch (error) {\r\n            invisibleElements.push(element);\r\n        }\r\n    });\r\n    entriesToRemove(elements, invisibleElements);\r\n}\r\n\r\nexport function findFixedAncestors(elements) {\r\n    const fixedAncestors = new Map();\r\n    elements.forEach((element) => {\r\n        const fixedAncestor = findFixedAncestor(element);\r\n        if (fixedAncestor) fixedAncestors.set(fixedAncestor, element);\r\n    });\r\n    return fixedAncestors;\r\n}\r\n\r\nexport function findPath({ parent, element }) {\r\n    /*\r\n    sequential path between parent to element\r\n    */\r\n    const path = [];\r\n    let tmp = element;\r\n    while (tmp !== parent) {\r\n        path.unshift(tmp);\r\n        tmp = tmp.parentElement;\r\n    }\r\n    return path;\r\n}\r\n\r\nexport function isElementSizeEqualToWindow(element) {\r\n    let tolerance = 0.1;\r\n    let windowSize = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    };\r\n    let windowArea = windowSize.width * windowSize.height;\r\n    let elementArea = element.offsetWidth * element.offsetHeight;\r\n    return elementArea > (1 - tolerance) * windowArea;\r\n}\r\n\r\nexport function isOneDimension(element) {\r\n    if (element.offsetWidth < 5 || element.offsetHeight < 5) return true;\r\n    return false;\r\n}\r\n\r\nexport function isMajorChild(element, path) {\r\n    const elementArea = element.offsetWidth * element.offsetHeight;\r\n    const windowInnerSize = window.innerHeight * window.innerWidth;\r\n    for (const child of path) {\r\n        const childArea = child.offsetWidth * child.offsetHeight;\r\n        const isMajorSize = elementArea - childArea > windowInnerSize * 0.1;\r\n        if (\r\n            // textContent has better match compared to innerText\r\n            // child.innerText === element.innerText &&\r\n            child.textContent === element.textContent &&\r\n            isMajorSize &&\r\n            !isOneDimension(child)\r\n        )\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function hasEnoughWords(element) {\r\n    const matches = element.textContent.match(/\\w+/g);\r\n    return matches && matches.length > 3;\r\n}\r\n","export const toXPathText = (string) => `.//*[text()[${string}]]`;\r\n","import {\r\n    deleteInvisibleElements,\r\n    deleteUnrelatedElements,\r\n    findPath,\r\n    isMajorChild,\r\n    isOneDimension,\r\n    isElementSizeEqualToWindow,\r\n} from \"./elementMethods.js\";\r\nimport { findAncestorWithIntZIndex } from \"./elementMethods.js\";\r\n\r\nfunction findWordVariations(word) {\r\n    // one word variation\r\n    return [\r\n        word.charAt(0).toUpperCase() + word.slice(1),\r\n        word.toLowerCase(),\r\n        word.toUpperCase(),\r\n    ];\r\n}\r\n\r\nfunction findWordsVariations(words) {\r\n    // all words variations\r\n    const all = [];\r\n\r\n    for (const word of words) {\r\n        if (word.includes(\"contains(.,\")) continue;\r\n        all.push(...findWordVariations(word));\r\n    }\r\n\r\n    return all;\r\n}\r\n\r\nexport function concatWithOr(words, variation = true) {\r\n    /*\r\n        returns a XPATH expression\r\n        to look for each word contained in the text\r\n        or operator\r\n    */\r\n    let result = \"\";\r\n    if (variation) words = findWordsVariations(words);\r\n    words.forEach((word, index) => {\r\n        if (word.includes(\"contains(.,\")) {\r\n            if (result) result = result + \" or (\" + word + \")\";\r\n            else result = result + \"(\" + word + \")\";\r\n        } else {\r\n            if (result) result = result + ' or contains(., \"' + word + '\")';\r\n            else result = result + 'contains(., \"' + word + '\")';\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nexport function concatWithAnd(words) {\r\n    let result = \"\";\r\n    words.forEach((word, index) => {\r\n        if (word.includes(\"contains(.,\")) {\r\n            if (result) result = result + \" and (\" + word + \")\";\r\n            else result = result + \"(\" + word + \")\";\r\n        } else if (result) {\r\n            result = result + ' and contains(., \"' + word + '\")';\r\n        } else {\r\n            result = result + 'contains(., \"' + word + '\")';\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nexport function findElementsByXpath({ DOM, xpathExpression }) {\r\n    const result = DOM.evaluate(\r\n        xpathExpression,\r\n        DOM,\r\n        null,\r\n        // XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\r\n        XPathResult.ANY_TYPE,\r\n        null\r\n    );\r\n    // Loop through the matching elements\r\n    let node;\r\n    const matchedElements = [];\r\n\r\n    while ((node = result.iterateNext())) {\r\n        matchedElements.push(node);\r\n    }\r\n    return matchedElements;\r\n}\r\n\r\nexport function pruneElements({ elements, strict = false }) {\r\n    deleteUnrelatedElements(elements, strict);\r\n    deleteInvisibleElements(elements);\r\n}\r\n\r\nexport function findByZIndex(elements) {\r\n    const ancestorsWithIntZIndex = new Map();\r\n    elements.forEach((element) => {\r\n        const ancestorWithIntZIndex = findAncestorWithIntZIndex(element);\r\n        if (!ancestorWithIntZIndex) return;\r\n        ancestorsWithIntZIndex.set(ancestorWithIntZIndex, element);\r\n    });\r\n    return ancestorsWithIntZIndex;\r\n}\r\n\r\nfunction getElementDepth(element) {\r\n    let depth = 0;\r\n    let parent = element.parentElement;\r\n    while (parent && parent.tagName.toLowerCase() !== \"html\") {\r\n        depth++;\r\n        parent = parent.parentElement;\r\n    }\r\n    return depth;\r\n}\r\n\r\nexport function findDeepestElement(elements) {\r\n    let deepestElement = elements[0];\r\n    let maxDepth = getElementDepth(elements[0]);\r\n    elements.forEach((element) => {\r\n        const elementDepth = getElementDepth(element);\r\n        if (elementDepth > maxDepth) {\r\n            maxDepth = elementDepth;\r\n            deepestElement = element;\r\n        }\r\n    });\r\n    return deepestElement;\r\n}\r\n\r\nexport function findOptimal({ parent, element, frame = false }) {\r\n    /*\r\n    finds best possible element that covers all the banner-related content \r\n    also tries to shrink it as much as possible\r\n    head Element : parent\r\n    tail Element : element\r\n    */\r\n    let path = findPath({ parent: parent, element: element });\r\n    let headElement = parent;\r\n    let tailElement = element;\r\n    let optimalElement = null;\r\n    while (true) {\r\n        const opacity = parseFloat(\r\n            window.getComputedStyle(headElement).opacity\r\n        );\r\n        let backgroundColors = window\r\n            .getComputedStyle(headElement)\r\n            .backgroundColor.split(\",\");\r\n        let alpha = null;\r\n        if (backgroundColors.length === 4) {\r\n            alpha = parseFloat(backgroundColors[3].replace(\")\", \"\"));\r\n        } else {\r\n            alpha = 1.0;\r\n        }\r\n        if (headElement === tailElement) {\r\n            optimalElement = headElement;\r\n            break;\r\n        }\r\n        // check if there are any siblings for next one\r\n        // check transparency of head div\r\n        if (\r\n            ![\"div\", \"form\", \"section\"].includes(\r\n                headElement.tagName.toLowerCase()\r\n            )\r\n        ) {\r\n            headElement = path.shift();\r\n            continue;\r\n        }\r\n        if (!frame && isElementSizeEqualToWindow(headElement)) {\r\n            headElement = path.shift();\r\n            continue;\r\n        }\r\n        if (\r\n            (opacity !== 1.0 || alpha < 1.0) &&\r\n            isMajorChild(headElement, path)\r\n        ) {\r\n            headElement = path.shift();\r\n            continue;\r\n        }\r\n        if (isOneDimension(headElement)) {\r\n            // some divs have height or width of 0\r\n            headElement = path.shift();\r\n            continue;\r\n        }\r\n        optimalElement = headElement;\r\n        break;\r\n    }\r\n    return optimalElement;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { findBanners } from \"./bannerDetector/findBanners.js\";\r\n\r\nconsole.log(\"inside Content Script\");\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async function () {\r\n    // do stuff here\r\n    console.log(\"content-script.js is being executed\");\r\n\r\n    while (document.readyState !== \"complete\") {\r\n        console.log(\"document not ready\");\r\n        await ((ms) => new Promise((resolve) => setTimeout(resolve, ms)))(2000);\r\n    }\r\n    // chrome.runtime.getURL(\"static/dictWords.json\", async (fileUrl) => {\r\n    //     response = await fetch(fileUrl);\r\n    //     console.log(jsonizedFile);\r\n    // });\r\n    let filePath = chrome.runtime.getURL(\"static/dictWords.json\");\r\n    let response = await fetch(filePath);\r\n    let jsonizedFile;\r\n\r\n    if (response.ok) {\r\n        jsonizedFile = await response.json();\r\n        console.log(`json file containing words:`);\r\n        console.log(jsonizedFile);\r\n    } else {\r\n        console.error(\r\n            \"Failed to fetch JSON file:\",\r\n            response.status,\r\n            response.statusText\r\n        );\r\n        return;\r\n    }\r\n    console.log(`json file containing words:`);\r\n    console.log(jsonizedFile);\r\n    const banners = findBanners(document, \"de\", jsonizedFile);\r\n    console.log(`found banners`);\r\n    console.log(banners);\r\n});\r\n"],"names":[],"sourceRoot":""}